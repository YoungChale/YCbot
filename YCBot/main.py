import telebot
from telebot import types
import config
import database
import yookassa_integration as yookassa
from datetime import datetime

bot = telebot.TeleBot(config.TELEGRAM_BOT_TOKEN)

@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add(types.KeyboardButton("–ê–¥–º–∏–Ω –º–µ–Ω—é"))
    welcome_text = ("üëã <b>–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –±–∏—Ç –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –µ–≥–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.</b>\n"
                    "- –≠—Ç–æ—Ç –±–æ—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω –¥–ª—è –æ–±–ª–µ–≥—á–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ –±–∏—Ç–æ–≤, –±–µ–∑ –ª–∏—à–Ω–∏—Ö –¥–∏–∞–ª–æ–≥–æ–≤. "
                    "–ù–æ –µ—Å–ª–∏ —É —Ç–µ–±—è –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã –ø–∏—à–∏ –∏—Ö –º–Ω–µ –≤ –ª—Å <a href='https://t.me/prodyoungchale'>—Å—é–¥–∞</a>")
    try:
        with open('starphoto.jpg', 'rb') as photo:
            bot.send_photo(message.chat.id, photo, caption=welcome_text, parse_mode='HTML', reply_markup=markup)
    except FileNotFoundError:
        bot.send_message(message.chat.id, "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n" + welcome_text, parse_mode='HTML', reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "–ê–¥–º–∏–Ω –º–µ–Ω—é")
def admin_menu(message):
    if str(message.from_user.id) == str(config.ADMIN_USER_ID):
        markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        markup.add(types.KeyboardButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å –±–∏—Ç"), types.KeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"), types.KeyboardButton("–£–¥–∞–ª–∏—Ç—å –±–∏—Ç"), types.KeyboardButton("–ù–∞–∑–∞–¥"))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –º–µ–Ω—é.")

@bot.message_handler(func=lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å –±–∏—Ç")
def admin_delete_beat(message):
    if str(message.from_user.id) == str(config.ADMIN_USER_ID):
        beats = database.get_all_beats()
        if beats:
            markup = types.InlineKeyboardMarkup()
            for beat in beats:
                markup.add(types.InlineKeyboardButton(beat[1], callback_data=f"delete_{beat[0]}"))
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –±–∏—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)
        else:
            bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∏—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
    else:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –º–µ–Ω—é.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_"))
def confirm_delete_beat(call):
    beat_id = call.data.split('_')[1]
    beat = database.get_beat_by_id(beat_id)
    if beat:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–î–∞", callback_data=f"confirm_delete_{beat_id}"))
        markup.add(types.InlineKeyboardButton("–ù–µ—Ç", callback_data="cancel_delete"))
        bot.send_message(call.message.chat.id, f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –±–∏—Ç '{beat[1]}'?", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_delete_"))
def delete_beat(call):
    beat_id = call.data.split('_')[2]
    database.delete_beat_by_id(beat_id)
    bot.send_message(call.message.chat.id, "–ë–∏—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!")

@bot.callback_query_handler(func=lambda call: call.data == "cancel_delete")
def cancel_delete_beat(call):
    bot.send_message(call.message.chat.id, "–£–¥–∞–ª–µ–Ω–∏–µ –±–∏—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

@bot.message_handler(func=lambda message: message.text == "–ó–∞–≥—Ä—É–∑–∏—Ç—å –±–∏—Ç")
def admin_upload_beat(message):
    if str(message.from_user.id) == str(config.ADMIN_USER_ID):
        bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –±–∏—Ç.")
        bot.register_next_step_handler(message, get_beat_link)
    else:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –º–µ–Ω—é.")

def get_beat_link(message):
    link = message.text
    bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∏—Ç–∞.")
    bot.register_next_step_handler(message, get_beat_name, link)

def get_beat_name(message, link):
    name = message.text
    bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ .wav —Ñ–∞–π–ª.")
    bot.register_next_step_handler(message, get_wav_link, name, link)

def get_wav_link(message, name, link):
    wav_link = message.text
    bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ Trackout —Ñ–∞–π–ª.")
    bot.register_next_step_handler(message, get_trackout_link, name, link, wav_link)

def get_trackout_link(message, name, link, wav_link):
    trackout_link = message.text
    database.add_beat(name, link, wav_link, trackout_link)
    bot.send_message(message.chat.id, "üÜó –ë–∏—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω! –ü–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
    send_welcome(message)

@bot.message_handler(func=lambda message: message.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
def show_statistics(message):
    if str(message.from_user.id) == str(config.ADMIN_USER_ID):
        transactions = database.get_last_transactions()
        response = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ–∫—É–ø–æ–∫:\n"
        for t in transactions:
            response += f"User: {t[1]}, Beat ID: {t[2]}, License: {t[3]}, Amount: {t[4]}, Date: {t[5]}\n"
        bot.send_message(message.chat.id, response)
    else:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –º–µ–Ω—é.")

@bot.message_handler(func=lambda message: message.text == "–ù–∞–∑–∞–¥")
def go_back(message):
    send_welcome(message)

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    beat = database.find_beat_by_link(message.text)
    if beat:
        bot.send_chat_action(message.chat.id, 'typing')
        markup = types.InlineKeyboardMarkup()
        wav_payment_url, wav_payment_id = yookassa.create_payment(999, f"wav_{beat[0]}", config.YOOKASSA_REDIRECT_URI)
        trackout_payment_url, trackout_payment_id = yookassa.create_payment(2499, f"trackout_{beat[0]}", config.YOOKASSA_REDIRECT_URI)
        exclusive_payment_url, exclusive_payment_id = yookassa.create_payment(6999, f"exclusive_{beat[0]}", config.YOOKASSA_REDIRECT_URI)
        database.update_payment_ids(beat[0], wav_payment_id, trackout_payment_id, exclusive_payment_id)
        markup.add(types.InlineKeyboardButton("Wav ‚Äì 999‚ÇΩ", url=wav_payment_url))
        markup.add(types.InlineKeyboardButton("Trackout ‚Äì 2499‚ÇΩ", url=trackout_payment_url))
        markup.add(types.InlineKeyboardButton("Exclusive ‚Äì 6999‚ÇΩ", url=exclusive_payment_url))
        markup.add(types.InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_{beat[0]}"))
        try:
            with open('thisbeat.jpg', 'rb') as photo:
                bot.send_photo(message.chat.id, photo, caption=f"<b>{beat[1]}</b>\n\n<i>–ü—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ —Ç—ã –ø–æ–ª—É—á–∏—à—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω—É–∂–Ω–æ–≥–æ —Ç–µ–±–µ —Ñ–∞–π–ª–∞ ‚ù§Ô∏è</i>", parse_mode='HTML', reply_markup=markup)
        except FileNotFoundError:
            bot.send_message(message.chat.id, f"<b>{beat[1]}</b>\n\n<i>–ü—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ —Ç—ã –ø–æ–ª—É—á–∏—à—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω—É–∂–Ω–æ–≥–æ —Ç–µ–±–µ —Ñ–∞–π–ª–∞ ‚ù§Ô∏è</i>", parse_mode='HTML', reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "üö´ –£–ø—Å! –ù–µ –Ω–∞—à—ë–ª —Ç–∞–∫–æ–≥–æ –±–∏—Ç–∞ –∏–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è üòî. –ü–æ–ø—Ä–æ–±—É–π –Ω–∞–π—Ç–∏ –±–∏—Ç –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("check_"))
def check_payment(call):
    beat_id = call.data.split('_')[1]
    beat = database.get_beat_by_id(beat_id)

    if len(beat) < 8:
        bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ –ø–ª–∞—Ç–µ–∂–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–µ–∂–∏ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –ª–∏—Ü–µ–Ω–∑–∏–π
    wav_status, wav_description = yookassa.check_payment_status(beat[5]) if beat[5] else (None, None)
    trackout_status, trackout_description = yookassa.check_payment_status(beat[6]) if beat[6] else (None, None)
    exclusive_status, exclusive_description = yookassa.check_payment_status(beat[7]) if beat[7] else (None, None)

    if wav_status == "succeeded":
        bot.send_message(call.message.chat.id, f"ü•≥ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞! –í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è WAV —Ñ–∞–π–ª–∞:\n{beat[3]}")
    elif trackout_status == "succeeded":
        bot.send_message(call.message.chat.id, f"ü•≥ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞! –í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è Trackout —Ñ–∞–π–ª–∞:\n{beat[4]}")
    elif exclusive_status == "succeeded":
        database.delete_beat_by_id(beat_id)
        bot.send_message(call.message.chat.id, f"ü•≥ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞! –í–æ—Ç –≤–∞—à–∏ —Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:\nWAV: {beat[3]}\nTrackout: {beat[4]}\n\n–≠—Ç–æ—Ç –±–∏—Ç –±—ã–ª –ø—Ä–æ–¥–∞–Ω –∏ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
    else:
        bot.send_message(call.message.chat.id, "üò§ –û–∂–∏–¥–∞–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞.")

if __name__ == '__main__':
    database.initialize_db()
    database.migrate_db()
    bot.polling(none_stop=True)